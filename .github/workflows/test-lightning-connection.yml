name: Test Lightning Connection

on:
  workflow_dispatch: # Manual trigger for testing

jobs:
  test-lightning:
    runs-on: ubuntu-latest
    timeout-minutes: 360  # 6 hours max (GitHub Actions limit)
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Cache Lightning wallet data
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/lightning-wallet
        key: lightning-wallet-${{ runner.os }}-litd-v0.14.1-alpha-${{ hashFiles('lnd-init.sh') }}
        restore-keys: |
          lightning-wallet-${{ runner.os }}-litd-v0.14.1-alpha-
    
    - name: Install dependencies
      run: |
        pip install requests python-dotenv
    
    - name: Setup SSH key for droplet creation
      run: |
        # Put the CI key where the module expects it
        mkdir -p ~/.ssh
        echo "${{ secrets.DO_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        # Generate public key from private key
        ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub
    
    - name: Create and start Bitcoin + Lightning node
      env:
        DO_API_KEY: ${{ secrets.DO_API_KEY }}
      run: |
        echo "Creating/starting node on Digital Ocean..."
        
        # Check if droplet exists, create if not
        if python3 scripts/do/manage-mutinynet.py status | grep -q "Droplet: Not found"; then
          echo "No droplet found, creating new one..."
          python3 scripts/do/manage-mutinynet.py create
        else
          echo "Droplet exists, starting it..."
          python3 scripts/do/manage-mutinynet.py start
        fi
        
        # Get the droplet IP
        DROPLET_IP=$(python3 scripts/do/manage-mutinynet.py status | grep "IP:" | awk '{print $2}')
        echo "DROPLET_IP=$DROPLET_IP" >> $GITHUB_ENV
        echo "Droplet IP: $DROPLET_IP"
    
    - name: Wait for setup to complete
      run: |
        echo "Waiting for SSH on ${{ env.DROPLET_IP }}..."
        for i in {1..30}; do
          if nc -zv ${{ env.DROPLET_IP }} 22 2>/dev/null; then
            echo "SSH is ready!"
            # Wait for user_data script to complete
            echo "Waiting 3 minutes for setup script to complete..."
            sleep 180
            break
          fi
          echo "Attempt $i/30: SSH not ready yet..."
          sleep 10
        done
        
        # Add host to known_hosts
        ssh-keyscan -H ${{ env.DROPLET_IP }} >> ~/.ssh/known_hosts 2>/dev/null
    
    - name: Verify Bitcoin is running on Digital Ocean
      run: |
        echo "Checking Bitcoin on Digital Ocean droplet..."
        
        # Test RPC connection
        BLOCK_COUNT=$(ssh root@${{ env.DROPLET_IP }} "docker exec bitcoind bitcoin-cli -rpcuser=mutinynet -rpcpassword=uBoBbUdAmCvNOuXfUW3c getblockcount" || echo "error")
        
        if [ "$BLOCK_COUNT" = "error" ]; then
          echo "❌ Failed to connect to Bitcoin RPC"
          ssh root@${{ env.DROPLET_IP }} "docker ps"
          ssh root@${{ env.DROPLET_IP }} "docker logs bitcoind --tail 50"
          exit 1
        else
          echo "✅ Bitcoin is running, block height: $BLOCK_COUNT"
        fi
        
        # Test ZMQ ports are accessible
        for port in 28332 28333 38332; do
          if nc -zv ${{ env.DROPLET_IP }} $port 2>/dev/null; then
            echo "✅ Port $port is accessible"
          else
            echo "❌ Port $port is not accessible"
          fi
        done
    
    - name: Start Lightning Terminal locally
      run: |
        echo "Starting Lightning Terminal locally on GitHub Actions runner..."
        
        # Create cache directory if it doesn't exist
        mkdir -p ~/.cache/lightning-wallet
        
        # Check if this is first run (no cache)
        if [ ! -d ~/.cache/lightning-wallet/lnd-wallet ] || [ ! -f ~/.cache/lightning-wallet/lnd-wallet/wallet.db ]; then
          echo "⚠️ FIRST RUN DETECTED - No cached wallet found"
          echo "This will take 15-30 minutes for initial blockchain sync (~7,000 blocks)"
          echo "Subsequent runs will use cached wallet and start instantly"
        else
          echo "✅ Found cached wallet - should start quickly"
        fi
        
        # Set the Bitcoin RPC host to the Digital Ocean droplet
        export BITCOIN_RPC_HOST=${{ env.DROPLET_IP }}
        
        # Start Lightning services locally
        docker compose -f docker-compose.ci-lightning.yml up -d
        
        # Wait for services to initialize
        echo "Waiting 60 seconds for services to initialize..."
        sleep 60
        
        # Check status
        docker ps
        docker logs lit-init
        docker logs lit --tail 20
    
    - name: Test Lightning connection
      run: |
        echo "Testing Lightning Terminal running locally..."
        
        # Test if Lightning Terminal UI responds
        if curl -k -s https://localhost:8443 | grep -q 'Lightning Terminal'; then
          echo "✅ Lightning Terminal UI is running!"
        else
          echo "❌ Lightning Terminal UI not responding"
          docker logs lit --tail 50
          exit 1
        fi
        
        # Test LND getinfo with infinite retries (for first-run wallet sync)
        echo "Testing LND via lncli..."
        echo "NOTE: This will wait indefinitely for wallet sync. Check GitHub Actions manually."
        echo "First run may take 15-30 minutes for ~7,000 block sync"
        
        RETRY=0
        LAST_SYNC_HEIGHT=0
        
        while true; do
          RETRY=$((RETRY + 1))
          
          # Every 10 attempts, show detailed progress
          if [ $((RETRY % 10)) -eq 0 ]; then
            echo ""
            echo "===== Status Check at $(date) ====="
            echo "Attempt $RETRY (running for $((RETRY * 30)) seconds)"
            
            # Try to get sync status from logs
            SYNC_STATUS=$(docker logs lit --tail 100 2>&1 | grep -E "(Syncing|height|block)" | tail -5 || true)
            if [ -n "$SYNC_STATUS" ]; then
              echo "Recent sync activity:"
              echo "$SYNC_STATUS"
            fi
            
            # Check current block height if possible
            CURRENT_HEIGHT=$(docker logs lit --tail 200 2>&1 | grep -oE "height=([0-9]+)" | tail -1 | cut -d= -f2 || echo "0")
            if [ "$CURRENT_HEIGHT" != "0" ] && [ "$CURRENT_HEIGHT" != "$LAST_SYNC_HEIGHT" ]; then
              echo "Current sync height: $CURRENT_HEIGHT"
              echo "Progress since last check: $((CURRENT_HEIGHT - LAST_SYNC_HEIGHT)) blocks"
              LAST_SYNC_HEIGHT=$CURRENT_HEIGHT
            fi
            echo "================================"
          else
            echo -n "."
          fi
          
          NODE_INFO=$(docker exec lit lncli --network signet getinfo 2>&1 || true)
          
          if echo "$NODE_INFO" | grep -q "identity_pubkey"; then
            echo ""
            echo "$NODE_INFO"
            NODE_PUBKEY=$(echo "$NODE_INFO" | grep identity_pubkey | cut -d'"' -f4)
            echo "Lightning node pubkey: $NODE_PUBKEY"
            echo "✅ Lightning node is operational after $((RETRY * 30)) seconds!"
            break
          elif echo "$NODE_INFO" | grep -q "starting up"; then
            # Silent wait, progress shown above
            sleep 30
          else
            # Show unexpected responses every 5 attempts
            if [ $((RETRY % 5)) -eq 0 ]; then
              echo "Status: $NODE_INFO"
            fi
            sleep 30
          fi
        done
    
    - name: Test Lightning functionality
      run: |
        echo "=== Testing Lightning RPC calls ==="
        
        # First wait for wallet to be fully synced before attempting operations
        echo "Ensuring wallet is fully synced before testing..."
        SYNC_RETRY=0
        LAST_HEIGHT=0
        STALL_COUNT=0
        
        while true; do
          SYNC_RETRY=$((SYNC_RETRY + 1))
          
          # Check wallet sync status
          WALLET_INFO=$(docker exec lit lncli --network signet getinfo 2>&1 || true)
          
          # Debug: Show raw getinfo output on first attempt
          if [ $SYNC_RETRY -eq 1 ]; then
            echo "Debug - Raw getinfo output:"
            echo "$WALLET_INFO" | head -20
          fi
          
          # Extract and trim whitespace from JSON values
          SYNCED_TO_CHAIN=$(echo "$WALLET_INFO" | grep -o '"synced_to_chain":[^,]*' | cut -d: -f2 | tr -d ' ' || echo "false")
          SYNCED_TO_GRAPH=$(echo "$WALLET_INFO" | grep -o '"synced_to_graph":[^,]*' | cut -d: -f2 | tr -d ' ' || echo "false")
          
          # More robust block height extraction
          BLOCK_HEIGHT=$(echo "$WALLET_INFO" | grep -o '"block_height":[0-9]*' | cut -d: -f2 || echo "")
          if [ -z "$BLOCK_HEIGHT" ]; then
            # Try alternative parsing if block_height not found
            BLOCK_HEIGHT=$(echo "$WALLET_INFO" | grep -oE 'block_height":\s*[0-9]+' | grep -o '[0-9]*' || echo "0")
          fi
          # Ensure it's a number
          if ! [[ "$BLOCK_HEIGHT" =~ ^[0-9]+$ ]]; then
            BLOCK_HEIGHT="0"
          fi
          
          if [ "$SYNCED_TO_CHAIN" = "true" ]; then
            echo "✅ Wallet is synced to chain at block $BLOCK_HEIGHT!"
            break
          fi
          
          # Initialize BLOCKS_SYNCED
          BLOCKS_SYNCED=0
          
          # Check for stalled sync
          if [ "$BLOCK_HEIGHT" = "$LAST_HEIGHT" ] && [ "$BLOCK_HEIGHT" != "0" ]; then
            STALL_COUNT=$((STALL_COUNT + 1))
            if [ $STALL_COUNT -gt 10 ]; then
              echo "⚠️ WARNING: Sync appears stalled at block $BLOCK_HEIGHT for 5 minutes"
              echo "Checking detailed logs..."
              docker logs lit --tail 50 2>&1 | grep -E "(ERR|WRN|error|warn|fail)" || true
            fi
          else
            STALL_COUNT=0
            if [ "$LAST_HEIGHT" != "0" ] && [ "$BLOCK_HEIGHT" != "0" ] && [ "$BLOCK_HEIGHT" -gt "$LAST_HEIGHT" ]; then
              BLOCKS_SYNCED=$((BLOCK_HEIGHT - LAST_HEIGHT))
              echo "Progress: Synced $BLOCKS_SYNCED blocks (now at $BLOCK_HEIGHT)"
            fi
          fi
          LAST_HEIGHT=$BLOCK_HEIGHT
          
          # Show detailed progress every 2 attempts (1 minute)
          if [ $((SYNC_RETRY % 2)) -eq 0 ]; then
            echo ""
            echo "===== Wallet Sync Status at $(date) ====="
            echo "Attempt $SYNC_RETRY (running for $((SYNC_RETRY * 30)) seconds / $((SYNC_RETRY / 2)) minutes)"
            echo "Synced to chain: $SYNCED_TO_CHAIN"
            echo "Synced to graph: $SYNCED_TO_GRAPH"
            echo "Current block height: $BLOCK_HEIGHT"
            
            # Get more detailed sync info from logs
            echo ""
            echo "Last 5 sync-related log entries:"
            docker logs lit --tail 100 2>&1 | grep -E "(LNWL|LTND|height|Rescan|Catch)" | tail -5 || echo "No sync logs found"
            
            # Check Bitcoin connection
            echo ""
            echo "Bitcoin backend status:"
            docker logs lit --tail 50 2>&1 | grep -E "(BTCN|backend|bitcoin)" | tail -3 || echo "No Bitcoin logs found"
            
            # Get wallet rescan progress if available
            echo ""
            echo "Rescan progress:"
            docker logs lit --tail 200 2>&1 | grep -E "Rescanned through block" | tail -3 || echo "No rescan progress found"
            
            # Check current target height
            TARGET_HEIGHT=$(docker logs lit --tail 200 2>&1 | grep -oE "start_height=[0-9]+" | tail -1 | cut -d= -f2 || echo "0")
            if [ "$TARGET_HEIGHT" != "0" ] && [ "$BLOCK_HEIGHT" != "0" ] && [ -n "$TARGET_HEIGHT" ] && [ -n "$BLOCK_HEIGHT" ]; then
              REMAINING=$((TARGET_HEIGHT - BLOCK_HEIGHT))
              echo "Target height: $TARGET_HEIGHT (${REMAINING} blocks remaining)"
              
              # Estimate time remaining if we have progress
              if [ -n "$BLOCKS_SYNCED" ] && [ "$BLOCKS_SYNCED" -gt 0 ] 2>/dev/null; then
                EST_MINUTES=$((REMAINING / BLOCKS_SYNCED))
                echo "Estimated time remaining: ~${EST_MINUTES} minutes"
              fi
            elif [ "$TARGET_HEIGHT" != "0" ]; then
              echo "Target height: $TARGET_HEIGHT (current height unknown)"
            fi
            
            echo "================================"
          else
            echo -n "."
          fi
          
          sleep 30
        done
        
        # Now run the actual tests with retries for each command
        echo ""
        echo "Running Lightning RPC tests..."
        
        # Get wallet balance with retry
        echo "Checking wallet balance..."
        for i in {1..3}; do
          BALANCE=$(docker exec lit lncli --network signet walletbalance 2>&1 || true)
          if echo "$BALANCE" | grep -q "total_balance"; then
            echo "Wallet balance: $BALANCE"
            break
          else
            echo "Attempt $i/3 failed: $BALANCE"
            sleep 10
          fi
        done
        
        # Get list of peers
        echo "Checking Lightning peers..."
        PEERS=$(docker exec lit lncli --network signet listpeers || true)
        echo "Peers: $PEERS"
        
        # Get channels
        echo "Checking channels..."
        CHANNELS=$(docker exec lit lncli --network signet listchannels || true)
        echo "Channels: $CHANNELS"
        
        # Check graph sync status
        echo "Checking graph sync..."
        GRAPH_INFO=$(docker exec lit lncli --network signet describegraph 2>&1 | head -20 || true)
        echo "Graph info (first 20 lines): $GRAPH_INFO"
        
        # Get network info  
        echo "Getting network info..."
        NETWORK_INFO=$(docker exec lit lncli --network signet getnetworkinfo || true)
        echo "Network info: $NETWORK_INFO"
        
        # Generate a new address for funding with retries
        echo "Generating Lightning address..."
        for i in {1..5}; do
          echo "Attempt $i/5 to generate address..."
          NEW_ADDR=$(timeout 30 docker exec lit lncli --network signet newaddress p2wkh 2>&1 || echo "timeout")
          
          if echo "$NEW_ADDR" | grep -q "address"; then
            ADDR=$(echo "$NEW_ADDR" | grep address | cut -d'"' -f4)
            echo "New address for funding: $ADDR"
            break
          elif [ "$NEW_ADDR" = "timeout" ]; then
            echo "Command timed out after 30 seconds, retrying..."
            sleep 10
          else
            echo "Unexpected response: $NEW_ADDR"
            sleep 10
          fi
          
          if [ $i -eq 5 ]; then
            echo "⚠️ Could not generate address after 5 attempts"
            echo "This may indicate the wallet is still syncing"
          fi
        done
        
        echo "✅ Lightning RPC tests completed!"
    
    - name: Wait for graph sync
      run: |
        echo "Waiting for Lightning graph to sync..."
        
        # Give it 5 minutes to sync some graph data
        echo "Waiting 5 minutes for initial graph sync..."
        sleep 300
        
        # Check graph stats
        echo "=== Graph Statistics ==="
        GRAPH_STATS=$(docker exec lit lncli --network signet getnetworkinfo || true)
        
        NUM_NODES=$(echo "$GRAPH_STATS" | grep num_nodes | grep -o '[0-9]*' | head -1 || echo "0")
        NUM_CHANNELS=$(echo "$GRAPH_STATS" | grep num_channels | grep -o '[0-9]*' | head -1 || echo "0")
        
        echo "Nodes in graph: $NUM_NODES"
        echo "Channels in graph: $NUM_CHANNELS"
        
        if [ "$NUM_NODES" -gt "0" ]; then
          echo "✅ Graph has synced with $NUM_NODES nodes"
        else
          echo "⚠️ Graph may not be fully synced yet (0 nodes found)"
          echo "This could be normal for mutinynet if there are no other active nodes"
        fi
    
    - name: Test Taproot Assets
      run: |
        echo "=== Testing Taproot Assets daemon ==="
        
        # First, debug the certificate paths
        echo "Debugging Taproot Assets certificate paths..."
        echo "Checking /root/.tapd directory structure:"
        docker exec lit ls -la /root/.tapd/ 2>&1 || true
        
        echo "Checking /root/.lnd directory structure:"
        docker exec lit ls -la /root/.lnd/ 2>&1 || true
        
        echo "Checking if tls.cert exists in .lnd:"
        docker exec lit ls -la /root/.lnd/tls.cert 2>&1 || true
        
        # Try using LND's cert for tapd
        echo "Attempting to use LND's TLS cert for tapcli..."
        TAPD_WITH_LND_CERT=$(docker exec lit tapcli --network signet --tlscertpath=/root/.lnd/tls.cert getinfo 2>&1 || true)
        
        if echo "$TAPD_WITH_LND_CERT" | grep -q "version"; then
          echo "✅ Taproot Assets daemon is running (using LND cert)!"
          echo "Taproot Assets info: $TAPD_WITH_LND_CERT"
          
          # List assets with correct cert path
          echo "Listing taproot assets..."
          ASSETS=$(docker exec lit tapcli --network signet --tlscertpath=/root/.lnd/tls.cert assets list 2>&1 || true)
          echo "Assets: $ASSETS"
        else
          echo "⚠️ Taproot Assets may not be ready even with LND cert: $TAPD_WITH_LND_CERT"
          
          # Check tapd logs for more info
          echo "Checking tapd logs for errors:"
          docker exec lit sh -c 'grep -i tapd /root/.lit/logs/litd.log | tail -20' 2>&1 || true
        fi
    
    # - name: Cleanup - Destroy droplet
    #   if: always()
    #   env:
    #     DO_API_KEY: ${{ secrets.DO_API_KEY }}
    #   run: |
    #     echo "Destroying droplet to save costs..."
    #     python3 scripts/do/manage-mutinynet.py destroy || true
    #     echo "Droplet destroyed (volume preserved)"