name: Test Lightning Connection

on:
  workflow_dispatch: # Manual trigger for testing

jobs:
  test-lightning:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Cache Lightning wallet data
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/lightning-wallet
        key: lightning-wallet-${{ runner.os }}-litd-v0.14.1-alpha-${{ hashFiles('lnd-init.sh') }}
        restore-keys: |
          lightning-wallet-${{ runner.os }}-litd-v0.14.1-alpha-
    
    - name: Install dependencies
      run: |
        pip install requests python-dotenv
    
    - name: Setup SSH key for droplet creation
      run: |
        # Put the CI key where the module expects it
        mkdir -p ~/.ssh
        echo "${{ secrets.DO_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        # Generate public key from private key
        ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub
    
    - name: Create and start Bitcoin + Lightning node
      env:
        DO_API_KEY: ${{ secrets.DO_API_KEY }}
      run: |
        echo "Creating/starting node on Digital Ocean..."
        
        # Check if droplet exists, create if not
        if python3 scripts/do/manage-mutinynet.py status | grep -q "Droplet: Not found"; then
          echo "No droplet found, creating new one..."
          python3 scripts/do/manage-mutinynet.py create
        else
          echo "Droplet exists, starting it..."
          python3 scripts/do/manage-mutinynet.py start
        fi
        
        # Get the droplet IP
        DROPLET_IP=$(python3 scripts/do/manage-mutinynet.py status | grep "IP:" | awk '{print $2}')
        echo "DROPLET_IP=$DROPLET_IP" >> $GITHUB_ENV
        echo "Droplet IP: $DROPLET_IP"
    
    - name: Wait for setup to complete
      run: |
        echo "Waiting for SSH on ${{ env.DROPLET_IP }}..."
        for i in {1..30}; do
          if nc -zv ${{ env.DROPLET_IP }} 22 2>/dev/null; then
            echo "SSH is ready!"
            # Wait for user_data script to complete
            echo "Waiting 3 minutes for setup script to complete..."
            sleep 180
            break
          fi
          echo "Attempt $i/30: SSH not ready yet..."
          sleep 10
        done
        
        # Add host to known_hosts
        ssh-keyscan -H ${{ env.DROPLET_IP }} >> ~/.ssh/known_hosts 2>/dev/null
    
    - name: Verify Bitcoin is running on Digital Ocean
      run: |
        echo "Checking Bitcoin on Digital Ocean droplet..."
        
        # Test RPC connection
        BLOCK_COUNT=$(ssh root@${{ env.DROPLET_IP }} "docker exec bitcoind bitcoin-cli -rpcuser=mutinynet -rpcpassword=uBoBbUdAmCvNOuXfUW3c getblockcount" || echo "error")
        
        if [ "$BLOCK_COUNT" = "error" ]; then
          echo "❌ Failed to connect to Bitcoin RPC"
          ssh root@${{ env.DROPLET_IP }} "docker ps"
          ssh root@${{ env.DROPLET_IP }} "docker logs bitcoind --tail 50"
          exit 1
        else
          echo "✅ Bitcoin is running, block height: $BLOCK_COUNT"
        fi
        
        # Test ZMQ ports are accessible
        for port in 28332 28333 38332; do
          if nc -zv ${{ env.DROPLET_IP }} $port 2>/dev/null; then
            echo "✅ Port $port is accessible"
          else
            echo "❌ Port $port is not accessible"
          fi
        done
    
    - name: Start Lightning Terminal locally
      run: |
        echo "Starting Lightning Terminal locally on GitHub Actions runner..."
        
        # Create cache directory if it doesn't exist
        mkdir -p ~/.cache/lightning-wallet
        
        # Set the Bitcoin RPC host to the Digital Ocean droplet
        export BITCOIN_RPC_HOST=${{ env.DROPLET_IP }}
        
        # Start Lightning services locally
        docker compose -f docker-compose.ci-lightning.yml up -d
        
        # Wait for services to initialize
        echo "Waiting 60 seconds for services to initialize..."
        sleep 60
        
        # Check status
        docker ps
        docker logs lit-init
        docker logs lit --tail 20
    
    - name: Test Lightning connection
      run: |
        echo "Testing Lightning Terminal running locally..."
        
        # Test if Lightning Terminal UI responds
        if curl -k -s https://localhost:8443 | grep -q 'Lightning Terminal'; then
          echo "✅ Lightning Terminal UI is running!"
        else
          echo "❌ Lightning Terminal UI not responding"
          docker logs lit --tail 50
          exit 1
        fi
        
        # Test LND getinfo with retries
        echo "Testing LND via lncli..."
        MAX_RETRIES=20
        RETRY=0
        
        while [ $RETRY -lt $MAX_RETRIES ]; do
          RETRY=$((RETRY + 1))
          echo "Attempt $RETRY/$MAX_RETRIES..."
          
          NODE_INFO=$(docker exec lit lncli --network signet getinfo 2>&1 || true)
          
          if echo "$NODE_INFO" | grep -q "identity_pubkey"; then
            echo "$NODE_INFO"
            NODE_PUBKEY=$(echo "$NODE_INFO" | grep identity_pubkey | cut -d'"' -f4)
            echo "Lightning node pubkey: $NODE_PUBKEY"
            echo "✅ Lightning node is operational!"
            break
          elif echo "$NODE_INFO" | grep -q "starting up"; then
            echo "LND still starting up, waiting 30 seconds..."
            sleep 30
          else
            echo "Unexpected response: $NODE_INFO"
            sleep 30
          fi
          
          if [ $RETRY -eq $MAX_RETRIES ]; then
            echo "❌ Failed to connect to LND after $MAX_RETRIES attempts (10 minutes)"
            docker logs lit --tail 50
            exit 1
          fi
        done
    
    - name: Test Lightning functionality
      run: |
        echo "=== Testing Lightning RPC calls ==="
        
        # Get wallet balance
        echo "Checking wallet balance..."
        BALANCE=$(docker exec lit lncli --network signet walletbalance || true)
        echo "Wallet balance: $BALANCE"
        
        # Get list of peers
        echo "Checking Lightning peers..."
        PEERS=$(docker exec lit lncli --network signet listpeers || true)
        echo "Peers: $PEERS"
        
        # Get channels
        echo "Checking channels..."
        CHANNELS=$(docker exec lit lncli --network signet listchannels || true)
        echo "Channels: $CHANNELS"
        
        # Check graph sync status
        echo "Checking graph sync..."
        GRAPH_INFO=$(docker exec lit lncli --network signet describegraph | head -20 || true)
        echo "Graph info (first 20 lines): $GRAPH_INFO"
        
        # Get network info  
        echo "Getting network info..."
        NETWORK_INFO=$(docker exec lit lncli --network signet getnetworkinfo || true)
        echo "Network info: $NETWORK_INFO"
        
        # Generate a new address for funding
        echo "Generating Lightning address..."
        NEW_ADDR=$(docker exec lit lncli --network signet newaddress p2wkh | grep address | cut -d'"' -f4 || true)
        echo "New address for funding: $NEW_ADDR"
        
        echo "✅ Lightning RPC tests completed!"
    
    - name: Wait for graph sync
      run: |
        echo "Waiting for Lightning graph to sync..."
        
        # Give it 5 minutes to sync some graph data
        echo "Waiting 5 minutes for initial graph sync..."
        sleep 300
        
        # Check graph stats
        echo "=== Graph Statistics ==="
        GRAPH_STATS=$(docker exec lit lncli --network signet getnetworkinfo || true)
        
        NUM_NODES=$(echo "$GRAPH_STATS" | grep num_nodes | grep -o '[0-9]*' | head -1 || echo "0")
        NUM_CHANNELS=$(echo "$GRAPH_STATS" | grep num_channels | grep -o '[0-9]*' | head -1 || echo "0")
        
        echo "Nodes in graph: $NUM_NODES"
        echo "Channels in graph: $NUM_CHANNELS"
        
        if [ "$NUM_NODES" -gt "0" ]; then
          echo "✅ Graph has synced with $NUM_NODES nodes"
        else
          echo "⚠️ Graph may not be fully synced yet (0 nodes found)"
          echo "This could be normal for mutinynet if there are no other active nodes"
        fi
    
    - name: Test Taproot Assets
      run: |
        echo "=== Testing Taproot Assets daemon ==="
        
        # First, debug the certificate paths
        echo "Debugging Taproot Assets certificate paths..."
        echo "Checking /root/.tapd directory structure:"
        docker exec lit ls -la /root/.tapd/ 2>&1 || true
        
        echo "Checking /root/.lnd directory structure:"
        docker exec lit ls -la /root/.lnd/ 2>&1 || true
        
        echo "Checking if tls.cert exists in .lnd:"
        docker exec lit ls -la /root/.lnd/tls.cert 2>&1 || true
        
        # Try using LND's cert for tapd
        echo "Attempting to use LND's TLS cert for tapcli..."
        TAPD_WITH_LND_CERT=$(docker exec lit tapcli --network signet --tlscertpath=/root/.lnd/tls.cert getinfo 2>&1 || true)
        
        if echo "$TAPD_WITH_LND_CERT" | grep -q "version"; then
          echo "✅ Taproot Assets daemon is running (using LND cert)!"
          echo "Taproot Assets info: $TAPD_WITH_LND_CERT"
          
          # List assets with correct cert path
          echo "Listing taproot assets..."
          ASSETS=$(docker exec lit tapcli --network signet --tlscertpath=/root/.lnd/tls.cert assets list 2>&1 || true)
          echo "Assets: $ASSETS"
        else
          echo "⚠️ Taproot Assets may not be ready even with LND cert: $TAPD_WITH_LND_CERT"
          
          # Check tapd logs for more info
          echo "Checking tapd logs for errors:"
          docker exec lit sh -c 'grep -i tapd /root/.lit/logs/litd.log | tail -20' 2>&1 || true
        fi
    
    # - name: Cleanup - Destroy droplet
    #   if: always()
    #   env:
    #     DO_API_KEY: ${{ secrets.DO_API_KEY }}
    #   run: |
    #     echo "Destroying droplet to save costs..."
    #     python3 scripts/do/manage-mutinynet.py destroy || true
    #     echo "Droplet destroyed (volume preserved)"