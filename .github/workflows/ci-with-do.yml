name: CI with Digital Ocean Bitcoin Node

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  COMPOSE_PROJECT_NAME: mutinynet-test

jobs:
  test-with-external-bitcoin:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install DO management script dependencies
      run: |
        pip install requests

    - name: Start Digital Ocean Bitcoin node
      env:
        DO_API_KEY: ${{ secrets.DO_API_KEY }}
      run: |
        # Check if node exists and start it
        python scripts/do/manage-mutinynet.py status || true
        python scripts/do/manage-mutinynet.py start || python scripts/do/manage-mutinynet.py create
        
        # Get the IP address
        export BITCOIN_IP=$(python -c "
        import sys
        sys.path.insert(0, '.')
        from infrastructure.digital_ocean.client import MutinynetDOClient
        client = MutinynetDOClient()
        droplet = client.find_mutinynet_droplet()
        if droplet:
            ip = client.get_droplet_ip(droplet['id'])
            print(ip)
        ")
        
        echo "Bitcoin node IP: $BITCOIN_IP"
        echo "BITCOIN_IP=$BITCOIN_IP" >> $GITHUB_ENV
        
        # Wait for Bitcoin node to be ready
        echo "Waiting for Bitcoin node to sync..."
        for i in {1..60}; do
          if nc -z $BITCOIN_IP 38332 2>/dev/null; then
            echo "Bitcoin RPC port is open"
            break
          fi
          echo "Waiting for Bitcoin node... ($i/60)"
          sleep 5
        done

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Create required volumes
      run: |
        mkdir -p ~/volumes/.lnd ~/volumes/.lit ~/volumes/.tapd
        chmod -R 777 ~/volumes

    - name: Configure services for external Bitcoin
      run: |
        # Create environment file with Bitcoin node details
        cat > .env << EOF
        EXTERNAL_IP=127.0.0.1
        BITCOIN_RPC_HOST=${{ env.BITCOIN_IP }}:38332
        BITCOIN_RPC_USER=bitcoin
        BITCOIN_RPC_PASS=bitcoin
        BITCOIN_ZMQ_HOST=${{ env.BITCOIN_IP }}
        EOF

    - name: Start Lightning services
      run: |
        # Use the CI compose file that excludes bitcoind
        docker-compose -f docker-compose.yml -f docker-compose.ci.yml up -d lit-init
        sleep 10
        docker-compose -f docker-compose.yml -f docker-compose.ci.yml up -d lit
        
        echo "Waiting for Lightning Terminal..."
        ./scripts/wait-for-service.sh lit 8443 120

    - name: Start LNbits
      run: |
        docker-compose -f docker-compose.yml -f docker-compose.ci.yml up -d lnbits
        echo "Waiting for LNbits..."
        ./scripts/wait-for-service.sh lnbits 5000 60

    - name: Run health checks
      run: |
        # Modified health check that uses external Bitcoin
        cat > scripts/health-check-external.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "=== Health Checks (External Bitcoin) ==="
        
        # Check external Bitcoin daemon
        echo -n "Checking external Bitcoin node... "
        if curl -s --user bitcoin:bitcoin \
             --data-binary '{"jsonrpc":"1.0","method":"getblockchaininfo","params":[]}' \
             -H 'content-type: text/plain;' \
             http://$BITCOIN_IP:38332/ > /dev/null 2>&1; then
            echo "✓ OK"
        else
            echo "✗ FAILED"
            exit 1
        fi
        
        # Check Lightning Terminal
        echo -n "Checking Lightning Terminal... "
        if curl -k -s https://localhost:8443 2>/dev/null | grep -q "html"; then
            echo "✓ OK"
        else
            echo "✗ FAILED"
            exit 1
        fi
        
        # Check LNbits
        echo -n "Checking LNbits... "
        if curl -s http://localhost:5000 2>/dev/null | grep -q "html"; then
            echo "✓ OK"
        else
            echo "✗ FAILED"
            exit 1
        fi
        
        echo "=== All Health Checks Passed ==="
        EOF
        
        chmod +x scripts/health-check-external.sh
        BITCOIN_IP=${{ env.BITCOIN_IP }} ./scripts/health-check-external.sh

    - name: Run integration tests
      run: |
        echo "Running integration tests with external Bitcoin node..."
        # Tests would connect to services locally and Bitcoin remotely
        ./tests/integration-test.sh || true

    - name: Collect logs on failure
      if: failure()
      run: |
        echo "=== Docker Compose Status ==="
        docker-compose ps
        echo "=== Lightning Terminal Logs ==="
        docker-compose logs --tail=100 lit
        echo "=== LNbits Logs ==="
        docker-compose logs --tail=100 lnbits

    - name: Stop Digital Ocean node (save costs)
      if: always()
      env:
        DO_API_KEY: ${{ secrets.DO_API_KEY }}
      run: |
        # Stop the DO droplet to save costs
        python scripts/do/manage-mutinynet.py stop || true
        echo "Bitcoin node stopped to save costs"

    - name: Clean up
      if: always()
      run: |
        docker-compose -f docker-compose.yml -f docker-compose.ci.yml down -v
        rm -rf ~/volumes