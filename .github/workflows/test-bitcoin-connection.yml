name: Test Bitcoin Connection

on:
  workflow_dispatch: # Manual trigger for testing

jobs:
  test-bitcoin:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        pip install requests python-dotenv
    
    - name: Setup SSH key for droplet creation
      run: |
        # Put the CI key where the module expects it
        mkdir -p ~/.ssh
        echo "${{ secrets.DO_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        # Generate public key from private key
        ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub
    
    - name: Create and start Bitcoin node
      env:
        DO_API_KEY: ${{ secrets.DO_API_KEY }}
      run: |
        echo "Creating/starting Bitcoin node on Digital Ocean..."
        
        # Check if droplet exists, create if not
        if python3 scripts/do/manage-mutinynet.py status | grep -q "Droplet: Not found"; then
          echo "No droplet found, creating new one..."
          python3 scripts/do/manage-mutinynet.py create
        else
          echo "Droplet exists, starting it..."
          python3 scripts/do/manage-mutinynet.py start
        fi
        
        # Get the droplet IP
        DROPLET_IP=$(python3 scripts/do/manage-mutinynet.py status | grep "IP:" | awk '{print $2}')
        echo "DROPLET_IP=$DROPLET_IP" >> $GITHUB_ENV
        echo "Droplet IP: $DROPLET_IP"
    
    - name: Wait for SSH to be ready
      run: |
        echo "Waiting for SSH on ${{ env.DROPLET_IP }}..."
        for i in {1..30}; do
          if nc -zv ${{ env.DROPLET_IP }} 22 2>/dev/null; then
            echo "SSH is ready!"
            # Wait additional time for user_data script to complete
            echo "Waiting 2 minutes for setup script to complete..."
            sleep 120
            break
          fi
          echo "Attempt $i/30: SSH not ready yet..."
          sleep 10
        done
    
    - name: Setup SSH known hosts
      run: |
        # Add host to known_hosts
        ssh-keyscan -H ${{ env.DROPLET_IP }} >> ~/.ssh/known_hosts 2>/dev/null
        echo "SSH configured for ${{ env.DROPLET_IP }}"
    
    - name: Wait for Bitcoin to be ready
      run: |
        echo "Waiting for Bitcoin to be ready..."
        
        # Use known RPC credentials from deploy/bitcoin.conf
        RPC_USER="mutinynet"
        RPC_PASS="uBoBbUdAmCvNOuXfUW3c"
        
        echo "RPC_USER=$RPC_USER" >> $GITHUB_ENV
        echo "RPC_PASS=$RPC_PASS" >> $GITHUB_ENV
        
        # Poll Bitcoin RPC every 30 seconds for max 10 minutes
        MAX_ATTEMPTS=20
        ATTEMPT=0
        
        while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
          ATTEMPT=$((ATTEMPT + 1))
          echo "Attempt $ATTEMPT/$MAX_ATTEMPTS..."
          
          # Try to get block count
          RESPONSE=$(curl -s -u "$RPC_USER:$RPC_PASS" \
            -X POST http://${{ env.DROPLET_IP }}:38332 \
            -H "Content-Type: application/json" \
            -d '{"jsonrpc":"2.0","method":"getblockcount","params":[],"id":1}' || echo '{"error":"connection failed"}')
          
          if echo "$RESPONSE" | grep -q '"result"'; then
            BLOCK_COUNT=$(echo "$RESPONSE" | grep -o '"result":[0-9]*' | cut -d':' -f2)
            echo "✅ Bitcoin is ready! Current block: $BLOCK_COUNT"
            
            # Get sync status
            SYNC_RESPONSE=$(curl -s -u "$RPC_USER:$RPC_PASS" \
              -X POST http://${{ env.DROPLET_IP }}:38332 \
              -H "Content-Type: application/json" \
              -d '{"jsonrpc":"2.0","method":"getblockchaininfo","params":[],"id":1}')
            
            HEADERS=$(echo "$SYNC_RESPONSE" | grep -o '"headers":[0-9]*' | cut -d':' -f2)
            BLOCKS=$(echo "$SYNC_RESPONSE" | grep -o '"blocks":[0-9]*' | cut -d':' -f2)
            
            echo "Sync status: $BLOCKS/$HEADERS blocks"
            
            if [ "$BLOCKS" = "$HEADERS" ]; then
              echo "✅ Bitcoin is fully synced!"
            else
              echo "⏳ Bitcoin is still syncing..."
            fi
            
            break
          else
            echo "Bitcoin not ready yet. Response: $RESPONSE"
            
            # Check if bitcoind is running
            ssh root@${{ env.DROPLET_IP }} "docker ps | grep bitcoind || echo 'Bitcoin container not running!'"
            
            if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
              echo "❌ Bitcoin failed to become ready after 10 minutes"
              
              # Get logs for debugging
              echo "=== Bitcoin logs ==="
              ssh root@${{ env.DROPLET_IP }} "docker logs --tail 50 bitcoind"
              exit 1
            fi
            
            sleep 30
          fi
        done
    
    - name: Test Bitcoin RPC calls
      run: |
        echo "Testing various RPC calls..."
        
        # Get network info
        echo "=== Network Info ==="
        curl -s -u "${{ env.RPC_USER }}:${{ env.RPC_PASS }}" \
          -X POST http://${{ env.DROPLET_IP }}:38332 \
          -H "Content-Type: application/json" \
          -d '{"jsonrpc":"2.0","method":"getnetworkinfo","params":[],"id":1}' | jq '.result'
        
        # Get peer info
        echo "=== Peer Info ==="
        curl -s -u "${{ env.RPC_USER }}:${{ env.RPC_PASS }}" \
          -X POST http://${{ env.DROPLET_IP }}:38332 \
          -H "Content-Type: application/json" \
          -d '{"jsonrpc":"2.0","method":"getpeerinfo","params":[],"id":1}' | jq '.result | length'
        echo "peers connected"
        
        # Get blockchain info
        echo "=== Blockchain Info ==="
        curl -s -u "${{ env.RPC_USER }}:${{ env.RPC_PASS }}" \
          -X POST http://${{ env.DROPLET_IP }}:38332 \
          -H "Content-Type: application/json" \
          -d '{"jsonrpc":"2.0","method":"getblockchaininfo","params":[],"id":1}' | jq '.result | {chain, blocks, headers, bestblockhash}'
        
        echo "✅ All RPC tests passed!"
    
    # - name: Cleanup - Destroy droplet
    #   if: always()
    #   env:
    #     DO_API_KEY: ${{ secrets.DO_API_KEY }}
    #   run: |
    #     echo "Destroying droplet to save costs..."
    #     python3 scripts/do/manage-mutinynet.py destroy || true
    #     echo "Droplet destroyed (volume preserved)"